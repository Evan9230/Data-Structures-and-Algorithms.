void InitStack(SqStack &S)
{
    S.top = -1;
}

//栈空判断
bool StackEmpty(SqStack S)
{ 
    if (S.top == -1)//栈空
        return true;
    else
        return false;
}


//进栈操作
bool Push(SqStack &S, ElemType x) 
{
    if (S.top == Maxsize - 1) //栈满
        return false;
    S.data[++S.top] = x return ture;
}

出栈操作
bool Pop(SqStack &S, ElemType x)
{
    if (S.top == -1) //栈空
        return false;
    S.data[S.top--] = x return ture;
}

读栈顶
bool GetTop(SqStack S, ElemType x)
{
    if (S.top == -1)//栈空
        return false;
    x = S.data[S.top] return ture;
}


//共享栈入栈
int Pop(shareStack *ss,int flag){
    if(flag == 1){
        if(ss->top1 == -1)
            return -1;
        return ss->data[ss->top1--];
    }else if(flag == 2){
        if(ss->top2 == MAXSIZE)
            return -1;
        return ss->data[ss->top2++];
    }
    return -1;
}


//共享栈出栈
int Push(shareStack *ss,int num,int flag){
    if(ss->top1+1 == ss->top2)
        return 0;
    if(flag == 1){
        ss->data[++ss->top1] = num;
        return 1;
    }else if( flag == 2){
        ss->data[--ss->top2] = num;
        return 1;
    }
    return 0;
}
